// "Ng∆∞·ªùi quan s√°t" - V√≠ d·ª•: c√°c champ trong 1 team
class Observer {
  constructor(name) {
    this.namePick = name;
  }

  updateStatus(location) {
    this.goToHelp(location);
  }

  goToHelp(location) {
    console.log(`${this.namePick} :::: PING :::: ${location}`);
  }
}

// ƒê·ªëi t∆∞·ª£ng b·ªã quan s√°t - N∆°i n·∫øu c√≥ tr·∫°ng th√°i thay ƒë·ªïi, s·∫Ω b√°o v·ªÅ "Ng∆∞·ªùi quan s√°t"
class Subject {
  constructor() {
    this.observerList = [];
  }

  // Th√™m "Ng∆∞·ªùi quan s√°t" l·∫Øng nghe s·ª± ki·ªán!
  addObserver(observer) {
    this.observerList.push(observer);
  }

  // L·∫∑p qua danh s√°ch "Ng∆∞·ªùi quan s√°t" ƒë·ªÉ th√¥ng b√°o!
  notify(location) {
    this.observerList.forEach((observer) => observer.updateStatus(location));
  }
}

//Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng b·ªã quan s√°t m·ªõi!
const subject = new Subject();

//Your pick - T·∫°o "Ng∆∞·ªùi quan s√°t" üëÄ
const yasuo = new Observer("YASUO");
const malphite = new Observer("MALPHITE");
const wukong = new Observer("WUKONG");

//Th√™m "Ng∆∞·ªùi quan s√°t" v√†o team (ho·∫∑c l·∫Øng nghe s·ª± ki·ªán!)
subject.addObserver(yasuo);
subject.addObserver(malphite);
subject.addObserver(wukong);

// Th√¥ng b√°o location v·ªã tr√≠ c·∫ßn h·ªó tr·ª£
subject.notify("MID");

/**
 * K·∫æT QU·∫¢
 * YASUO :::: PING :::: MID
 * MALPHITE :::: PING :::: MID
 * WUKONG :::: PING :::: MID
 */
